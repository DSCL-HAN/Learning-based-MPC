classdef TopLevelModule_ATEN11 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %TopLevelModule_ATEN11 Auto-generated custom layer
    % Auto-generated by MATLAB on 2025-02-08 17:52:06

    properties (Learnable)
        % Networks (type dlnetwork)

    end

    properties
        % Non-Trainable Parameters
        Constant_14
        Constant_13
        Constant_28



    end

    properties (Learnable)
        % Trainable Parameters

    end

    methods
        function obj = TopLevelModule_ATEN11(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end

        function [mean_input_1] = predict(obj,mean_8)

            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [mean_8, mean_8_format] = mnasnet1_0.ops.permuteToReversePyTorch(mean_8, 'BCSS', 4);
            [mean_8] = struct('value', mean_8, 'rank', int64(4));

            [mean_input_1] = tracedPyTorchFunction(obj,mean_8,false,"predict");


            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(mean_input_1.value) == 'U'))
                mean_input_1 = permute(mean_input_1.value, fliplr(1:max(2,mean_input_1.rank)));
            end

        end



        function [mean_input_1] = forward(obj,mean_8)

            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [mean_8, mean_8_format] = mnasnet1_0.ops.permuteToReversePyTorch(mean_8, 'BCSS', 4);
            [mean_8] = struct('value', mean_8, 'rank', int64(4));

            [mean_input_1] = tracedPyTorchFunction(obj,mean_8,true,"forward");


            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(mean_input_1.value) == 'U'))
                mean_input_1 = permute(mean_input_1.value, fliplr(1:max(2,mean_input_1.rank)));
            end

        end



        function [mean_input_1] = tracedPyTorchFunction(obj,mean_8,isForward,predict)

            [Constant_14] = mnasnet1_0.ops.makeStructForConstant(double(obj.Constant_14), int64(0), "Typed");
            [Constant_13] = mnasnet1_0.ops.makeStructForConstant(int64(obj.Constant_13), int64(0), "Typed");
            [Constant_28] = mnasnet1_0.ops.makeStructForConstant(int64(obj.Constant_28), int64(1), "Typed");
            [mean_input_1] = mnasnet1_0.ops.pyMean(mean_8, Constant_28, Constant_13);
        end

    end
end

